                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f47002000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6c801000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f79801000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x034: 719101000000000000   | 	jle Done		# if so, goto Done:
0x03d: 30f8fcffffffffffffff | 	irmovq $-4,%r8
0x047: 30fb0100000000000000 | 	irmovq $1,%r11
0x051: 30fcffffffffffffffff | 	irmovq $-1,%r12
0x05b: 30fd2000000000000000 | 	irmovq $32,%r13
0x065: 30fe0300000000000000 | 	irmovq $3,%r14
0x06f: 6082                 | 	addq %r8,%rdx
0x071: 720d01000000000000   | 	jl final
                            | 
0x07a: 50370000000000000000 | loop1:	mrmovq (%rdi),%rbx
0x084: 50170800000000000000 | 	mrmovq 8(%rdi),%rcx
0x08e: 50971000000000000000 | 	mrmovq 16(%rdi),%r9
0x098: 50a71800000000000000 |         mrmovq 24(%rdi),%r10
0x0a2: 40360000000000000000 | 	rmmovq %rbx,(%rsi)
0x0ac: 6233                 | 	andq %rbx,%rbx
0x0ae: 71b900000000000000   | 	jle lt0
0x0b7: 60b0                 | 	addq %r11,%rax
0x0b9: 40160800000000000000 | lt0:	rmmovq %rcx,8(%rsi)
0x0c3: 6211                 | 	andq %rcx,%rcx
0x0c5: 71d000000000000000   | 	jle lt1
0x0ce: 60b0                 |         addq %r11,%rax
0x0d0: 40961000000000000000 | lt1:    rmmovq %r9,16(%rsi)
0x0da: 6299                 |         andq %r9,%r9
0x0dc: 71e700000000000000   |         jle lt2
0x0e5: 60b0                 |         addq %r11,%rax
0x0e7: 40a61800000000000000 | lt2:	rmmovq %r10,24(%rsi)
0x0f1: 62aa                 |         andq %r10,%r10
0x0f3: 71fe00000000000000   |         jle iter
0x0fc: 60b0                 |         addq %r11,%rax
                            | 
0x0fe: 60d7                 | iter:	addq %r13,%rdi
0x100: 60d6                 | 	addq %r13,%rsi
0x102: 6082                 | 	addq %r8,%rdx
0x104: 757a00000000000000   | 	jge loop1
                            | 
0x10d: 60e2                 | final:	addq %r14,%rdx
0x10f: 729101000000000000   | 	jl Done
0x118: 50370000000000000000 | 	mrmovq (%rdi),%rbx
0x122: 50170800000000000000 | 	mrmovq 8(%rdi),%rcx
0x12c: 40360000000000000000 | 	rmmovq %rbx,(%rsi)
0x136: 6233                 | 	andq %rbx,%rbx
0x138: 714301000000000000   | 	jle finalp
0x141: 60b0                 |         addq %r11,%rax
0x143: 60c2                 | finalp:	addq %r12,%rdx
0x145: 729101000000000000   | 	jl Done
0x14e: 40160800000000000000 | 	rmmovq %rcx,8(%rsi)
0x158: 6211                 | 	andq %rcx,%rcx
0x15a: 716501000000000000   | 	jle finalt
0x163: 60b0                 |         addq %r11,%rax
0x165: 60c2                 | finalt: addq %r12,%rdx
0x167: 729101000000000000   | 	jl Done
0x170: 50371000000000000000 | 	mrmovq 16(%rdi),%rbx
0x17a: 40361000000000000000 | 	rmmovq %rbx,16(%rsi)
0x184: 6233                 | 	andq %rbx,%rbx
0x186: 719101000000000000   | 	jle Done
0x18f: 60b0                 |         addq %r11,%rax
                            | 	
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x191:                      | Done:
0x191: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x192:                      | End:
                            | #/* $end ncopy-ys */
0x192:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x198:                      | 	.align 8
0x198:                      | src:
0x198: 0100000000000000     | 	.quad 1
0x1a0: feffffffffffffff     | 	.quad -2
0x1a8: fdffffffffffffff     | 	.quad -3
0x1b0: 0400000000000000     | 	.quad 4
0x1b8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x1c0:                      | 	.align 16
0x1c0:                      | Predest:
0x1c0: fadebc0000000000     | 	.quad 0xbcdefa
0x1c8:                      | dest:
0x1c8: abefcd0000000000     | 	.quad 0xcdefab
0x1d0: abefcd0000000000     | 	.quad 0xcdefab
0x1d8: abefcd0000000000     | 	.quad 0xcdefab
0x1e0: abefcd0000000000     | 	.quad 0xcdefab
0x1e8:                      | Postdest:
0x1e8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x1f0:                      | .align 8
                            | # Run time stack
0x1f0: 0000000000000000     | 	.quad 0
0x1f8: 0000000000000000     | 	.quad 0
0x200: 0000000000000000     | 	.quad 0
0x208: 0000000000000000     | 	.quad 0
0x210: 0000000000000000     | 	.quad 0
0x218: 0000000000000000     | 	.quad 0
0x220: 0000000000000000     | 	.quad 0
0x228: 0000000000000000     | 	.quad 0
0x230: 0000000000000000     | 	.quad 0
0x238: 0000000000000000     | 	.quad 0
0x240: 0000000000000000     | 	.quad 0
0x248: 0000000000000000     | 	.quad 0
0x250: 0000000000000000     | 	.quad 0
0x258: 0000000000000000     | 	.quad 0
0x260: 0000000000000000     | 	.quad 0
0x268: 0000000000000000     | 	.quad 0
                            | 
0x270:                      | Stack:
